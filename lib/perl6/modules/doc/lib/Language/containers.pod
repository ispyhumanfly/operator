=begin pod

=TITLE Containers

=SUBTITLE A low-level explanation of Perl 6 containers

This article started as a conversion on IRC explaining the difference
between the C<Array> and the C<List> type in Perl 6. It explains the levels
of indirection involved in dealing with variables and container elements.

=head2 What is a variable?

Some people like to say "everything is an object", but in fact a variable is
not a user-exposed object in Perl 6.

When the compiler encounters a variable declaration like C<my $x>, it
registers it in some internal symbol table. This internal symbol table is
used to detect undeclared variables and to tie the code generation for the
variable to the correct scope.

At run time, a variable appears as an entry in a I<lexical pad>, or
I<lexpad> for short. This is a per-scope data structure that stores a
pointer for each variable.

In the case of C<my $x>, the lexpad entry for the variable C<$x> is a
pointer to an object of type C<Scalar>, usually just called I<the
container>.

=head2 Scalar containers

Although objects of type C<Scalar> are everywhere in Perl 6, you usually
never see them directly as objects, because most operations
I<decontainerize>, which means they act on the C<Scalar> container's
contents instead of the container itself.

In code like

    my $x = 42;
    say $x;

the assignment C<$x = 42> stores a pointer to the C<Int> object 42 in the
scalar container to which the lexpad entry for C<$x> points.

The assignment operator asks the container on the left to store the value on
its right. What exactly that means is up to the container type. For
C<Scalar> it means "replace the previously stored value with the new one".

Note that subroutine signatures allow passing around of containers:

    sub f($a is rw) {
        $a = 23;
    }
    my $x = 42;
    f($x);
    say $x;         # 23

Inside the subroutine, the lexpad entry for C<$a> points to the same
container that C<$x> points to outside the subroutine. Which is why
assignment to C<$a> also modifies the contents of C<$x>.

Likewise a routine can return a container if it is marked as C<is rw>:

    my $x = 23;
    sub f() is rw { $x };
    f() = 42;
    say $x;         # 42

For explicit returns, C<return-rw> instead of C<return> must be used.

Returning a container is how C<is rw> attribute accessors work. So

    class A {
        has $.attr is rw;
    }

is equivalent to

    class A {
        has $!attr;
        method attr() is rw { $!attr }
    }

=head2 Binding

Next to assignment, Perl 6 also supports I<binding> with the C<:=> operator.
When binding a value or a container to a variable, the lexpad entry of the
variable is modified (and not just the container it points to). If you write

    my $x := 42;

then the lexpad entry for C<$x> directly points to the C<Int> 42. Which
means that you cannot assign to it anymore:

    $ perl6 -e 'my $x := 42; $x = 23'
    Cannot modify an immutable value
       in block  at -e:1

You can also bind variables to other variables:

    my $a = 0;
    my $b = 0;
    $a := $b;
    $b = 42;
    say $a;         # 42

Here, after the initial binding, the lexpad entries for C<$a> and C<$b> both
point to the same scalar container, so assigning to one variable also
changes the contents of the other.

You've seen this situation before: it is exactly what happened with the
signature parameter marked as C<is rw>.

=head2 Scalar containers and listy things

There are a number of positional container types with slightly different
semantics in Perl 6. The most basic one is L<List|/type/List>
It is created by the comma operator.

    say (1, 2, 3).WHAT;     # (List)

A list is immutable, which means you cannot change the number of elements
in a list. But if one of the elements happens to be a scalar container,
you can still assign to it:

    my $x = 42;
    ($x, 1, 2)[0] = 23;
    say $x;                 # 23
    ($x, 1, 2)[1] = 23;     # Error: Cannot modify an immutable value

So the list doesn't care about whether its elements are values or
containers, they just store and retrieve whatever was given to them.

Lists can also be lazy, so elements at the end are generated on demand from an
iterator.

An C<Array> is just like a list, except that it forces all its elements to
be containers, which means that you can always assign to elements:

    my @a = 1, 2, 3;
    @a[0] = 42;
    say @a;         # 42 2 3

C<@a> actually stores three scalar containers. C<@a[0]> returns one of
them, and the assignment operator replaces the integer value stored in that
container with the new one, C<42>.

An L<Array> also has methods that can change the number of elements, notably
C<push>, C<pop>, C<shift>, C<unshift> and C<splice>.

=head2 Assigning and binding to array variables

Assigning to a scalar variable and to an array variable both do basically
the same thing: discard the old value(s), and enter some new value(s).

Nevertheless, it's easy to observe how different they are:

    my $x = 42; say $x.WHAT;    # (Int)
    my @a = 42; say @a.WHAT;    # (Array)

This is because the C<Scalar> container type hides itself well, but C<Array>
makes no such effort.

To place a non-C<Array> into an array variable, binding works:

    my @a := (1, 2, 3);
    say @a.WHAT;                # (List)

=head2 Binding to array elements

As a curious side note, Perl 6 supports binding to array elements:

    my @a = (1, 2, 3);
    @a[0] := my $x;
    $x = 42;
    say @a;                     # 42 2 3

If you've read and understood the previous explanations, it is now time to
wonder how this can possibly work. After all, binding to a variable requires
a lexpad entry for that variable, and while there is one for an array, there
aren't lexpad entries for each array element (you cannot expand the lexpad
at run time).

The answer is that binding to array elements is recognized at the syntax
level and instead of emitting code for a normal binding operation, a special
method on the array is called that knows how to do the binding itself.

Note that, while supported, one should generally avoid directly binding
uncontainerized things into array elements.  Doing so may produce
counter-intuitive results when the array is used later.

    my @a = (1,2,3);
    @a[0] := 42;         # This is not recommended, use assignment instead.
    my $b := 42;
    @a[1] := $b;         # Nor is this.
    @a[2] = $b;          # ...but this is fine.
    @a[1,2] := 1,2;      # This is not allowed and will fail.

Operations that mix Lists and Arrays generally protect against such
a thing happening accidentally.

=head2 Flattening, items and containers

The C<%> and C<@> sigils in Perl 6 generally indicate flattening. Hence
flattening list context iterates over them as if there were no container
boundary:

    my @a = 1, 2, 3;
    my @b = @a, 4, 5;
    say @b.elems;               # 5
    say @b.join: '|';           # 1|2|3|4|5

Here C<@a> is flattened out in the second line.

Item containers prevent flattening, thus allowing the programmer to write
nested data structures.

The following examples all do the same and do not flatten:

    my @a = 1, 2, 3;
    my @b = @a.item, 4, 5;
       @b = $(@a), 4, 5;
       @b = $@a, 4, 5;
       @b = [1, 2, 3], 4, 5;

    my $item = @a;
       @b = $item, 4, 5;

    say @b.perl;            # Array.new([1, 2, 3], 4, 5);

C<[...]> creates an itemized array, and C<Array.new(...)> a non-itemized
array.

There is a slight exception though: if you call a method on an itemized
container, it will generally behave as if it weren't itemized. So C<[1, 2,
3].join(',')> produces C<"1,2,3"> as a result, as one might hope.

This also means that calling the C<.list> method flattens out an itemized
container:

   my $item = [1, 2, 3];
   my @b = $item.list, 4, 5;    # 5 elems
      @b = @($item), 4, 5;      # a shortcut
      @b = @$item, 4, 5;        # another shortcut

Other methods on lists also return flat lists, so for example

   my $item = [1, 2, 3];
   my @b = $item.sort, 4, 5;    # 5 elems

sorts the elements of C<$item> and then returns a list that is flattened out
in the array assignment.

Note that C<.list> de-itemizes only the invocant; it does not recursively
flatten the whole data structure. For example in

    my @a = [1, [2, 3, 4]].list;
    say @a.elems;               # 2

the C<.list> only de-itemizes the outer brackets, the inner ones create an
array that is stored in the second element of the Array and is not touched
by C<.list>.

=head3 Non-flattening contexts

In the examples above, it was always assignment to an array variable that
flattened out non-itemized arrays. However, sometimes you want to preserve
the structure.

The most common case (and one of the reasons for the whole flattening vs.
non-flattening distinction to exist) is to have some list-like operator that
could conceivably return either a flat list, or a list of lists.  Consider
the zip operator C<Z>, which takes an element from each list like a zipper:

    my @left  = <a b c>;
    my @right = 1, 2, 3;

    my @flat = @left Z @right;
    my @tree = (@left Z @right).tree;

The expression C<@left Z @right> returns C<(('a', 1), ('b', 2), ('c', 3))>.
In a flattening context like array assignment, that flattens out into a list
of 6 elements, C<('a', 1, 'b', 2, 'c', 3)>. But if you want to preserve the
structure, you can append C<.tree>, and it returns the array

    ['a', 1], ['b', 2], ['c', 3]

On the other hand, assigning (or binding) to a scalar preserves the
structure without itemizing any inner arrays or lists:

    my $x = (<a b c> Z <D E F>);
    say $x.perl;                # (("a", "D"), ("b", "E"), ("c", "F")).list.item

Again C<.tree> can turn the inner parcels into "hard", itemized arrays:

    say $x.tree.perl;           # (["a", "D"], ["b", "E"], ["c", "F"]).list

What happens when you call C<$x.list>?

    say $x.list.perl;           # (("a", "D"), ("b", "E"), ("c", "F")).list

It just returned the same object without the outer C<.item> container, but
didn't look inside the list. If that's what you want, there is another
utility method called C<flat>:

    say $x.flat.perl            # ("a", "D", "b", "E", "c", "F").list

To reiterate the previous point: C<.list> only removes the itemization (or
scalar container) of the invocant, whereas C<.flat> walks the elements of
the invocant and removes their itemization (note that both methods don't
modify the invocant object; they just return a modified copy).

=head3 What flattens, what doesn't?

In general, operations that have to iterate the list usually flatten the
list.  Other operations don't. Here is a list of a few operations that
flatten:

=item .map, .grep, .first
=item Iteration with "for"
=item .join
=item assignment to an array variable
=item assignment to a hash variable

And a few that don't flatten:

=item Indexing with [$idx]
=item .elems
=item .tree

The first two cannot flatten, otherwise it would be very hard to get access
to the structure that's actually stored in the list and the whole
point of C<.tree> is not to flatten.

=end pod
